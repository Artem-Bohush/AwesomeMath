const ubique = require( 'ubique' );
const _ = require( 'wTools' );
require( 'wmathmatrix' );
require( 'wFiles' );
require( 'wequaler' );

const transp = ubique.transpose;

var data = _.fileProvider.fileRead( {
  filePath : `${__dirname}/../../data/System1000.json`,
  encoding : 'json',
} );

const M = createMatrix( data.M );
// console.log(M);
const x = data.x;
console.log( x );
let b = transp( data.b );
// console.log(b);

const xResult = ubique.linsolve( M, b );
console.log( xResult );

console.log( _.equivalent( xResult, x ) ); // false ?

// const m = _.Matrix
// ({
//   buffer : data.M,
//   dims : [ 100, 100 ],
//   inputRowMajor : 1,
// });
// console.log(m);

// const x = _.Matrix
// ({
//   buffer : data.x,
//   dims : [ 100, 1 ],
//   inputRowMajor : 1,
// });
// console.log(x);

// const res = [
//  -495.4250420489441,   -4053.910843679537,   -9628.632571339787,
//   7874.515284654458,    9176.229017755253,    -1867.6979982976518,
//   -6900.365294956585,   7145.186899647842,    597.6300551699296,
//   12195.753323401548,   6626.576636930281,    -2219.2290955693165,
//   -1810.0966223996043,  -7817.217972806707,   4189.270369144391,
//   3424.9292459996495,   2210.8567984890406,   1706.2877071138644,
//   7934.821923495482,    4384.274321975188,    -5275.340310657862,
//   4372.444166106871,    -3248.7981351428075,  -3567.8395666197644,
//   6430.641770376632,    9972.85532211061,     5533.804890226091,
//   8367.669267738169,    -3897.850214441762,   2010.7147056011588,
//   -1872.0126156157967,  -4873.627264331336,   7099.022523383911,
//   1237.9856252612146,   5219.8575918824745,   10895.660457053831,
//   -5032.929474528978,   67.57792836993985,    -16768.418876208092,
//   1600.7496441377034,   6145.984997278538,    -17549.476351740865,
//   1202.330926591705,    -11332.416508465263,  -5336.513486105114,
//   -5980.131527663053,   -4297.131109432001,   -11021.134472104539,
//   -3783.1071416537807,  -2474.7415040750916,  18100.612606234758,
//   4071.619137528432,    -5602.050741984985,   -8292.871184260324,
//   -729.3891806735229,   -93.10015939059903,   -469.53877862400486,
//   -5972.374096487196,   6270.806407464158,    -318.1327925541934,
//   -2717.8035214466377,  3295.7890568470634,   -2290.9915712571305,
//   -203.48483735184573,  -10550.013123674347,  14235.857568518499,
//   4110.6031149617465,   5198.842317694133,    547.1902183198417,
//   -6162.575820299716,   3358.38536393764,     4542.554923468893,
//   428.65343933945985,   -7273.6239975594535,  -12775.20859218718,
//   4278.995816635968,    9747.328808445294,    -12730.791726896183,
//   7092.10195622345,     4032.894084538708,    -2914.6224522542007,
//   -1276.5641149201163,  -684.2694207676517,   -2109.2933438600435,
//   -4955.971665599985,   1527.8011959173605,   -13136.225379350377,
//   -3188.768557164365,   -6781.875575329521,   -7794.718989207151,
//   -1643.0807688626821,  -16373.834729524571,  -1562.5088921467623,
//   1449.6033808549573,   -9355.517921059823,   -285.6882460275961,
//   -12800.022762555864,  -9353.269381825747,   -1913.8127231664014,
//   8944.50590702636
// ]

// const b = _.Matrix
// ({
//   buffer : res,
//   dims : [ 100, 1 ],
//   inputRowMajor : 1,
// });

// console.log(b);

// console.log(_.Matrix.Mul( null, [ m, x ] ));


// ----------------------

// const m = _.Matrix
// ({
//   buffer : [ 1, 1, -1, 1, -2, 3, 2, 3, 1 ],
//   dims : [ 3, 3 ],
//   inputRowMajor : 1,
// });
// console.log(m);

// const x1 = _.Matrix
// ({
//   buffer : [ 5.846154, -2.384615, -1.538462 ],
//   dims : [ 3, 1 ],
//   inputRowMajor : 1,
// });
// console.log(x1);

// const b1 = _.Matrix
// ({
//   buffer : [ 5, 6, 3 ],
//   dims : [ 3, 1 ],
//   inputRowMajor : 1,
// });
// console.log(b1);
// const res = _.Matrix.Mul( null, [ m, x1 ] )
// console.log(res);
// console.log(_.equivalent( res, b1 ));

// console.log(ubique.linsolve([ [ 1, 1, -1 ], [ 1, -2, 3 ], [ 2, 3, 1 ] ], transp([ 5, 6, 3 ])));
// // [[5.846154], [-2.384615], [-1.538462]]


function createMatrix( arr )
{
  'use strict';

  const rowLength = Math.sqrt( arr.length );
  const matrix = [];

  for( let i = 0; i < arr.length; i += rowLength )
  {
    matrix.push( arr.slice( i, i + rowLength ) )
  }

  return matrix;
}
